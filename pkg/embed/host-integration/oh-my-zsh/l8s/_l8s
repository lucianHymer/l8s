#compdef l8s

# ZSH completion for l8s - The container management system that really ties the room together

# Get container names from l8s list output
_l8s_get_containers() {
    local filter="$1"
    local containers=()
    local list_output
    
    # Get all containers
    list_output="$(l8s list 2>/dev/null | tail -n +2)"
    
    # Filter based on state if requested
    case "$filter" in
        running)
            # Filter for running containers
            containers=(${(f)"$(echo "$list_output" | grep -i running | awk '{print $1}' | sed 's/^dev-//')"})
            ;;
        stopped)
            # Filter for stopped/created containers
            containers=(${(f)"$(echo "$list_output" | grep -iE '(stopped|created|exited)' | awk '{print $1}' | sed 's/^dev-//')"})
            ;;
        *)
            # All containers
            containers=(${(f)"$(echo "$list_output" | awk '{print $1}' | sed 's/^dev-//')"})
            ;;
    esac
    
    compadd -a containers
}

# Main completion function
_l8s() {
    local curcontext="$curcontext" state line
    typeset -A opt_args
    
    # Define main commands
    local -a commands
    commands=(
        'init:Initialize l8s configuration for remote server'
        'build:Build the base container image on remote server'
        'create:Create a new development container'
        'list:List all l8s containers'
        'ls:List all l8s containers (alias for list)'
        'start:Start a stopped container'
        'stop:Stop a running container'
        'remove:Remove a container'
        'rm:Remove a container (alias for remove)'
        'rebuild:Rebuild a container with updated image'
        'info:Get detailed container information'
        'ssh:SSH into a container'
        'exec:Execute command in container'
        'paste:Paste clipboard content to container'
        'remote:Manage git remotes for containers'
        'connection:Manage SSH connections'
    )
    
    # Check if we're completing flags for a command
    local cmd_idx=2
    local cmd="${words[$cmd_idx]}"
    
    # Handle flag completion
    if [[ "$PREFIX" == -* ]]; then
        case "$cmd" in
            create)
                compadd -- --branch --dotfiles-path --help
                return 0
                ;;
            remove|rm)
                compadd -- --force -f --keep-volumes --help
                return 0
                ;;
            rebuild)
                compadd -- --build --skip-build --help
                return 0
                ;;
            connection)
                if [[ "${words[3]}" == "switch" ]]; then
                    compadd -- --dry-run --help
                    return 0
                fi
                ;;
            *)
                compadd -- --help
                return 0
                ;;
        esac
    fi
    
    # Handle different completion positions
    case $CURRENT in
        2)
            # Complete commands
            if [[ "$words[1]" == "l8s" ]]; then
                compadd ${commands%%:*}
            fi
            ;;
            
        3)
            # Complete based on the command
            case "${words[2]}" in
                start)
                    # Only show stopped containers
                    _l8s_get_containers "stopped"
                    ;;
                    
                stop|exec|paste)
                    # Only show running containers
                    _l8s_get_containers "running"
                    ;;
                    
                remove|rm|info|ssh|rebuild)
                    # Show all containers
                    _l8s_get_containers
                    ;;
                    
                remote)
                    # Show subcommands
                    compadd add remove
                    ;;
                    
                connection)
                    # Show connection subcommands
                    compadd list show switch
                    ;;
                    
                create)
                    # First arg is container name
                    _message 'container name'
                    ;;
            esac
            ;;
            
        4)
            # Complete based on command and previous args
            case "${words[2]}" in
                remote)
                    # After remote subcommand, complete containers
                    if [[ "${words[3]}" == "add" || "${words[3]}" == "remove" ]]; then
                        _l8s_get_containers
                    fi
                    ;;
                    
                connection)
                    # After connection subcommand
                    case "${words[3]}" in
                        show|switch)
                            # Complete connection names (we'd need to implement _l8s_get_connections)
                            _message 'connection name'
                            ;;
                    esac
                    ;;
                    
                create)
                    # Second arg is git URL (unless flag is present)
                    if [[ "${words[3]}" != -* ]]; then
                        _message 'git repository URL'
                    fi
                    ;;
                    
                paste)
                    # Optional name for clipboard file
                    _message 'clipboard name (optional)'
                    ;;
                    
                exec)
                    # After container name, suggest common commands
                    local -a common_commands
                    common_commands=(bash zsh nvim git python node go make npm cargo)
                    compadd -d common_commands $common_commands
                    ;;
            esac
            ;;
            
        *)
            # Handle remaining arguments
            case "${words[2]}" in
                create)
                    # Third arg is optional branch (if not a flag)
                    if [[ $CURRENT -eq 5 && "${words[4]}" != -* ]]; then
                        _message 'branch name (optional)'
                    fi
                    ;;
                exec)
                    # Additional arguments for exec command
                    _message 'command arguments'
                    ;;
            esac
            ;;
    esac
    
    return 0
}

# Initialize completion
_l8s "$@"